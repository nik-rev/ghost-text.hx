[package]
name = "ghost-text"
version = "0.1.2"
edition = "2024"

[lib]
name = "ghost_text"
crate-type = ["cdylib"]

[dependencies]

# serializaiton
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"

# async
tokio = { version = "1.45.0", features = ["full"] }
tokio-tungstenite = "0.26.2"
futures-util = { version = "0.3", default-features = false }

# logging
log = "0.4.27"

# Steel itself
steel-core = { rev = "0287954cc6a05bbd794f2636352bf64a71ea176d", git = "https://github.com/mattwparas/steel.git", version = "0.6.0", features = ["dylibs", "sync"] }
abi_stable = "0.11.3"
env_logger = "0.11.8"

# ============================
# 
#            Lints
# 
# ============================

[lints.rust]
unused_crate_dependencies = "warn"
redundant_imports = "warn"
# Documentation for all public items
missing_docs = "warn"
# `foo::bar::baz` => `bar::baz` if `bar` is in scope
unused_qualifications = "warn"
# detects rules of macros that weren't used
unused_macro_rules = "warn"
# lints against e.g. undefinedd meta variables
meta_variable_misuse = "warn"
# prevents types which can be created but cannot be named
unnameable_types = "warn"
# all types must `#[derive(Copy)]`
missing_copy_implementations = "warn"
# all types must `#[derive(Debug)]`
missing_debug_implementations = "warn"

[lints.clippy]
pedantic = { priority = -1, level = "warn" }
nursery = { priority = -1, level = "warn" }

# --- allowed lints
# 
# `$a * $b + $c` is slower and less precise than `$a.mul_add($b, $c)`
# but it is more readable, the gain in speed / precision
# will be negligible in most situations
suboptimal_flops = "allow"
# arbitrary limit imposes unnecessary
# restriction and can make code harder to follow
too_many_lines = "allow"
# if we need it const, make it const.
# no need to make everything that can be const, const
missing_const_for_fn = "allow"
cast_possible_truncation = "allow"
# ---

# --- more consistent ways of writing code
# 
# `if $a { Some($b) } else { None }` => `$a.then(|| $b)`
if_then_some_else_none = "warn"
# `use Trait` => `use Trait as _`
unused_trait_names = "warn"
# `foo.rs` => `foo/mod.rs`
self_named_module_files = "warn"
# omit `test_` prefix in tests: `fn test_foo` => `fn foo`
# TODO: enable in 1.88 ... redundant_test_prefix = "warn"
# `123832i64` => `123832_i64`
unseparated_literal_suffix = "warn"
# `Foo { a: _, b: 0, .. }` => `Foo { b: 0, .. }`
unneeded_field_pattern = "warn"
# ---

# --- explain more things
# 
# `#[allow]` => `#[allow, reason = "why"]`
allow_attributes_without_reason = "warn"
# `.unwrap()` => `.expect("why")`
unwrap_used = "warn"
# `assert!(...)` => `assert!(..., "why")`
missing_assert_message = "warn"
# documentation for everything
missing_docs_in_private_items = "warn"
# `path_buf.push("foo")` => `... = PathBuf::new().join("foo")`
pathbuf_init_then_push = "warn"
# mark return type as `!` for infinite loop fns
infinite_loop = "warn"
# ---

# --- catch debug remnants
#
dbg_macro = "warn"
todo = "warn"
use_debug = "warn"
unimplemented = "warn"
print_stdout = "warn" # > explicitly `#[allow]` functions to print
print_stderr = "warn" # >
# ---

# `create_dir(...)` => `create_dir_all(...)`
# usually, failing when dir already exists is
# not what we want
create_dir = "warn"
# `fs::read_to_string` requires much less steps than `File::read_to_string`
verbose_file_reads = "warn"
# new variants added by libraries become errors
# instead of being silently ignored
wildcard_enum_match_arm = "warn"
# `use std::io::{self}` => `use std::io`
unnecessary_self_imports = "warn"
# do not lose type information about NonZero numbers
non_zero_suggestions = "warn"
# exit should only happen from `main`
exit = "warn"
