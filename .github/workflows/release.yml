name: Build and Release Dynamic Libraries

# This workflow runs when a new tag is pushed to the repository.
on:
  push:
    tags:
      - 'v*.*.*' # Triggers on tags like v1.0.0

jobs:
  #---------------------------------------------------
  # Job to build the dynamic library for each target
  #---------------------------------------------------
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows (MSVC)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: ghost_text.dll
            artifact_name: windows-artifact

          # Linux (GNU)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: libghost_text.so
            artifact_name: linux-artifact

          # macOS (Apple)
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: libghost_text.dylib
            artifact_name: macos-artifact

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: rustup target add ${{ matrix.target }}

      - name: Build dynamic library (cdylib)
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_CRATE_NAME: ghost_text

      - name: Find and rename artifact
        shell: bash
        run: |
          mv "target/${{ matrix.target }}/release/${{ matrix.asset_name }}" "./${{ matrix.asset_name }}"

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ./${{ matrix.asset_name }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') # make sure it's a "tag" event

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: ls -R artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            artifacts/windows-artifact/*.dll
            artifacts/linux-artifact/*.so
            artifacts/macos-artifact/*.dylib
